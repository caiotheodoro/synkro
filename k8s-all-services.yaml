apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-ml-predictions
  namespace: default
  labels:
    app: ai-ml-predictions
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ai-ml-predictions
  template:
    metadata:
      labels:
        app: ai-ml-predictions
    spec:
      containers:
      - name: ai-ml-predictions
        image: ai-ml-predictions:v1
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
          name: http
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readiness
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: ai-ml-predictions
  namespace: default
  labels:
    app: ai-ml-predictions
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: ai-ml-predictions
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-auth
  namespace: default
  labels:
    app: api-gateway-auth
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway-auth
  template:
    metadata:
      labels:
        app: api-gateway-auth
    spec:
      containers:
      - name: api-gateway-auth
        image: caiotheodoro/api-gateway-auth:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        livenessProbe:
          httpGet:
            path: /auth/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-auth
  namespace: default
  labels:
    app: api-gateway-auth
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: api-gateway-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: default
  labels:
    app: notification-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
    spec:
      containers:
      - name: notification-service
        image: notification-service:v1
        imagePullPolicy: Never
        ports:
        - containerPort: 3002
          name: http
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: default
  labels:
    app: notification-service
spec:
  type: ClusterIP
  ports:
  - port: 3002
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: notification-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-dashboard
  namespace: default
  labels:
    app: frontend-dashboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-dashboard
  template:
    metadata:
      labels:
        app: frontend-dashboard
    spec:
      containers:
      - name: frontend-dashboard
        image: frontend-dashboard:v1
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-dashboard
  namespace: default
  labels:
    app: frontend-dashboard
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: frontend-dashboard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-auth
  namespace: default
  labels:
    app: frontend-auth
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-auth
  template:
    metadata:
      labels:
        app: frontend-auth
    spec:
      containers:
      - name: frontend-auth
        image: frontend-auth:v1
        imagePullPolicy: Never
        ports:
        - containerPort: 3001
          name: http
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-auth
  namespace: default
  labels:
    app: frontend-auth
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: frontend-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-landing
  namespace: default
  labels:
    app: frontend-landing
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-landing
  template:
    metadata:
      labels:
        app: frontend-landing
    spec:
      containers:
      - name: frontend-landing
        image: frontend-landing:v1
        imagePullPolicy: Never
        ports:
        - containerPort: 3003
          name: http
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-landing
  namespace: default
  labels:
    app: frontend-landing
spec:
  type: ClusterIP
  ports:
  - port: 3003
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: frontend-landing
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: default
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        env:
        - name: discovery.type
          value: single-node
        - name: ES_JAVA_OPTS
          value: "-Xms2g -Xmx2g"
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: default
  labels:
    app: elasticsearch
spec:
  type: ClusterIP
  ports:
  - port: 9200
    targetPort: http
    protocol: TCP
    name: http
  - port: 9300
    targetPort: transport
    protocol: TCP
    name: transport
  selector:
    app: elasticsearch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.11.1
        ports:
        - containerPort: 5044
          name: beats
        - containerPort: 9600
          name: monitoring
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 5044
    targetPort: beats
    protocol: TCP
    name: beats
  - port: 9600
    targetPort: monitoring
    protocol: TCP
    name: monitoring
  selector:
    app: logstash
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.11.1
        ports:
        - containerPort: 5601
          name: http
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        env:
        - name: ELASTICSEARCH_HOSTS
          value: http://elasticsearch:9200
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 5601
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: kibana 