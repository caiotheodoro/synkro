// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: inventory.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_CreateItem_FullMethodName             = "/inventory.InventoryService/CreateItem"
	InventoryService_GetItem_FullMethodName                = "/inventory.InventoryService/GetItem"
	InventoryService_UpdateItem_FullMethodName             = "/inventory.InventoryService/UpdateItem"
	InventoryService_DeleteItem_FullMethodName             = "/inventory.InventoryService/DeleteItem"
	InventoryService_ListItems_FullMethodName              = "/inventory.InventoryService/ListItems"
	InventoryService_GetInventoryLevels_FullMethodName     = "/inventory.InventoryService/GetInventoryLevels"
	InventoryService_AdjustInventory_FullMethodName        = "/inventory.InventoryService/AdjustInventory"
	InventoryService_AllocateInventory_FullMethodName      = "/inventory.InventoryService/AllocateInventory"
	InventoryService_ReleaseInventory_FullMethodName       = "/inventory.InventoryService/ReleaseInventory"
	InventoryService_BulkCreateItems_FullMethodName        = "/inventory.InventoryService/BulkCreateItems"
	InventoryService_BulkUpdateItems_FullMethodName        = "/inventory.InventoryService/BulkUpdateItems"
	InventoryService_StreamInventoryUpdates_FullMethodName = "/inventory.InventoryService/StreamInventoryUpdates"
	InventoryService_GetInventoryReport_FullMethodName     = "/inventory.InventoryService/GetInventoryReport"
	InventoryService_CheckAndReserveStock_FullMethodName   = "/inventory.InventoryService/CheckAndReserveStock"
	InventoryService_ReleaseReservedStock_FullMethodName   = "/inventory.InventoryService/ReleaseReservedStock"
	InventoryService_CommitReservation_FullMethodName      = "/inventory.InventoryService/CommitReservation"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Item Management
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	// Inventory Operations
	GetInventoryLevels(ctx context.Context, in *GetInventoryLevelsRequest, opts ...grpc.CallOption) (*GetInventoryLevelsResponse, error)
	AdjustInventory(ctx context.Context, in *AdjustInventoryRequest, opts ...grpc.CallOption) (*AdjustInventoryResponse, error)
	AllocateInventory(ctx context.Context, in *AllocateInventoryRequest, opts ...grpc.CallOption) (*AllocateInventoryResponse, error)
	ReleaseInventory(ctx context.Context, in *ReleaseInventoryRequest, opts ...grpc.CallOption) (*ReleaseInventoryResponse, error)
	// Bulk Operations
	BulkCreateItems(ctx context.Context, in *BulkCreateItemsRequest, opts ...grpc.CallOption) (*BulkCreateItemsResponse, error)
	BulkUpdateItems(ctx context.Context, in *BulkUpdateItemsRequest, opts ...grpc.CallOption) (*BulkUpdateItemsResponse, error)
	// Real-time Streams
	StreamInventoryUpdates(ctx context.Context, in *StreamInventoryUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InventoryUpdateEvent], error)
	// Reporting
	GetInventoryReport(ctx context.Context, in *GetInventoryReportRequest, opts ...grpc.CallOption) (*InventoryReportResponse, error)
	// Logistics Engine Integration
	CheckAndReserveStock(ctx context.Context, in *StockReservationRequest, opts ...grpc.CallOption) (*StockReservationResponse, error)
	ReleaseReservedStock(ctx context.Context, in *ReleaseStockRequest, opts ...grpc.CallOption) (*ReleaseStockResponse, error)
	CommitReservation(ctx context.Context, in *CommitReservationRequest, opts ...grpc.CallOption) (*CommitReservationResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventoryLevels(ctx context.Context, in *GetInventoryLevelsRequest, opts ...grpc.CallOption) (*GetInventoryLevelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryLevelsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetInventoryLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AdjustInventory(ctx context.Context, in *AdjustInventoryRequest, opts ...grpc.CallOption) (*AdjustInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_AdjustInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AllocateInventory(ctx context.Context, in *AllocateInventoryRequest, opts ...grpc.CallOption) (*AllocateInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_AllocateInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReleaseInventory(ctx context.Context, in *ReleaseInventoryRequest, opts ...grpc.CallOption) (*ReleaseInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReleaseInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) BulkCreateItems(ctx context.Context, in *BulkCreateItemsRequest, opts ...grpc.CallOption) (*BulkCreateItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_BulkCreateItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) BulkUpdateItems(ctx context.Context, in *BulkUpdateItemsRequest, opts ...grpc.CallOption) (*BulkUpdateItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkUpdateItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_BulkUpdateItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) StreamInventoryUpdates(ctx context.Context, in *StreamInventoryUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InventoryUpdateEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InventoryService_ServiceDesc.Streams[0], InventoryService_StreamInventoryUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamInventoryUpdatesRequest, InventoryUpdateEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InventoryService_StreamInventoryUpdatesClient = grpc.ServerStreamingClient[InventoryUpdateEvent]

func (c *inventoryServiceClient) GetInventoryReport(ctx context.Context, in *GetInventoryReportRequest, opts ...grpc.CallOption) (*InventoryReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryReportResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetInventoryReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CheckAndReserveStock(ctx context.Context, in *StockReservationRequest, opts ...grpc.CallOption) (*StockReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReservationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CheckAndReserveStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReleaseReservedStock(ctx context.Context, in *ReleaseStockRequest, opts ...grpc.CallOption) (*ReleaseStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseStockResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReleaseReservedStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CommitReservation(ctx context.Context, in *CommitReservationRequest, opts ...grpc.CallOption) (*CommitReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitReservationResponse)
	err := c.cc.Invoke(ctx, InventoryService_CommitReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	// Item Management
	CreateItem(context.Context, *CreateItemRequest) (*ItemResponse, error)
	GetItem(context.Context, *GetItemRequest) (*ItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*ItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	// Inventory Operations
	GetInventoryLevels(context.Context, *GetInventoryLevelsRequest) (*GetInventoryLevelsResponse, error)
	AdjustInventory(context.Context, *AdjustInventoryRequest) (*AdjustInventoryResponse, error)
	AllocateInventory(context.Context, *AllocateInventoryRequest) (*AllocateInventoryResponse, error)
	ReleaseInventory(context.Context, *ReleaseInventoryRequest) (*ReleaseInventoryResponse, error)
	// Bulk Operations
	BulkCreateItems(context.Context, *BulkCreateItemsRequest) (*BulkCreateItemsResponse, error)
	BulkUpdateItems(context.Context, *BulkUpdateItemsRequest) (*BulkUpdateItemsResponse, error)
	// Real-time Streams
	StreamInventoryUpdates(*StreamInventoryUpdatesRequest, grpc.ServerStreamingServer[InventoryUpdateEvent]) error
	// Reporting
	GetInventoryReport(context.Context, *GetInventoryReportRequest) (*InventoryReportResponse, error)
	// Logistics Engine Integration
	CheckAndReserveStock(context.Context, *StockReservationRequest) (*StockReservationResponse, error)
	ReleaseReservedStock(context.Context, *ReleaseStockRequest) (*ReleaseStockResponse, error)
	CommitReservation(context.Context, *CommitReservationRequest) (*CommitReservationResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) CreateItem(context.Context, *CreateItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedInventoryServiceServer) GetItem(context.Context, *GetItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedInventoryServiceServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventoryLevels(context.Context, *GetInventoryLevelsRequest) (*GetInventoryLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryLevels not implemented")
}
func (UnimplementedInventoryServiceServer) AdjustInventory(context.Context, *AdjustInventoryRequest) (*AdjustInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustInventory not implemented")
}
func (UnimplementedInventoryServiceServer) AllocateInventory(context.Context, *AllocateInventoryRequest) (*AllocateInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ReleaseInventory(context.Context, *ReleaseInventoryRequest) (*ReleaseInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseInventory not implemented")
}
func (UnimplementedInventoryServiceServer) BulkCreateItems(context.Context, *BulkCreateItemsRequest) (*BulkCreateItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateItems not implemented")
}
func (UnimplementedInventoryServiceServer) BulkUpdateItems(context.Context, *BulkUpdateItemsRequest) (*BulkUpdateItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateItems not implemented")
}
func (UnimplementedInventoryServiceServer) StreamInventoryUpdates(*StreamInventoryUpdatesRequest, grpc.ServerStreamingServer[InventoryUpdateEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamInventoryUpdates not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventoryReport(context.Context, *GetInventoryReportRequest) (*InventoryReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryReport not implemented")
}
func (UnimplementedInventoryServiceServer) CheckAndReserveStock(context.Context, *StockReservationRequest) (*StockReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndReserveStock not implemented")
}
func (UnimplementedInventoryServiceServer) ReleaseReservedStock(context.Context, *ReleaseStockRequest) (*ReleaseStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseReservedStock not implemented")
}
func (UnimplementedInventoryServiceServer) CommitReservation(context.Context, *CommitReservationRequest) (*CommitReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitReservation not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventoryLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventoryLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventoryLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventoryLevels(ctx, req.(*GetInventoryLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AdjustInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AdjustInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AdjustInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AdjustInventory(ctx, req.(*AdjustInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AllocateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AllocateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AllocateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AllocateInventory(ctx, req.(*AllocateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReleaseInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReleaseInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReleaseInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReleaseInventory(ctx, req.(*ReleaseInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_BulkCreateItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).BulkCreateItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_BulkCreateItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).BulkCreateItems(ctx, req.(*BulkCreateItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_BulkUpdateItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).BulkUpdateItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_BulkUpdateItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).BulkUpdateItems(ctx, req.(*BulkUpdateItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_StreamInventoryUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamInventoryUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServiceServer).StreamInventoryUpdates(m, &grpc.GenericServerStream[StreamInventoryUpdatesRequest, InventoryUpdateEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InventoryService_StreamInventoryUpdatesServer = grpc.ServerStreamingServer[InventoryUpdateEvent]

func _InventoryService_GetInventoryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventoryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventoryReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventoryReport(ctx, req.(*GetInventoryReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CheckAndReserveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckAndReserveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CheckAndReserveStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckAndReserveStock(ctx, req.(*StockReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReleaseReservedStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReleaseReservedStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReleaseReservedStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReleaseReservedStock(ctx, req.(*ReleaseStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CommitReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CommitReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CommitReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CommitReservation(ctx, req.(*CommitReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _InventoryService_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _InventoryService_GetItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _InventoryService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _InventoryService_DeleteItem_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _InventoryService_ListItems_Handler,
		},
		{
			MethodName: "GetInventoryLevels",
			Handler:    _InventoryService_GetInventoryLevels_Handler,
		},
		{
			MethodName: "AdjustInventory",
			Handler:    _InventoryService_AdjustInventory_Handler,
		},
		{
			MethodName: "AllocateInventory",
			Handler:    _InventoryService_AllocateInventory_Handler,
		},
		{
			MethodName: "ReleaseInventory",
			Handler:    _InventoryService_ReleaseInventory_Handler,
		},
		{
			MethodName: "BulkCreateItems",
			Handler:    _InventoryService_BulkCreateItems_Handler,
		},
		{
			MethodName: "BulkUpdateItems",
			Handler:    _InventoryService_BulkUpdateItems_Handler,
		},
		{
			MethodName: "GetInventoryReport",
			Handler:    _InventoryService_GetInventoryReport_Handler,
		},
		{
			MethodName: "CheckAndReserveStock",
			Handler:    _InventoryService_CheckAndReserveStock_Handler,
		},
		{
			MethodName: "ReleaseReservedStock",
			Handler:    _InventoryService_ReleaseReservedStock_Handler,
		},
		{
			MethodName: "CommitReservation",
			Handler:    _InventoryService_CommitReservation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamInventoryUpdates",
			Handler:       _InventoryService_StreamInventoryUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inventory.proto",
}
